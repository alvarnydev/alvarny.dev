---
import type { WorkScope } from "@/types";
import type { iconPaths } from "./IconPaths";
import Icon from "./Icon.astro";
import Pill from "./Pill.astro";

const sections: {
  scope: WorkScope;
  icon: keyof typeof iconPaths;
}[] = [
  { scope: "design", icon: "design" },
  { scope: "software", icon: "software" },
  { scope: "music", icon: "music" },
];
---

<work-nav>
  <div class="flex gap-2 pt-2 flex-wrap justify-center md:justify-start">
    {
      sections.map(({ scope, icon }) => (
        <button data-scope={scope}>
          <Pill>
            <Icon icon={icon} size="1.33em" /> {scope}
          </Pill>
        </button>
      ))
    }
  </div>
</work-nav>

<script>
  import type { WorkScope } from "@/types";
  const scopes = ["design", "music", "software"];

  document.addEventListener("astro:page-load", () => {
    class WorkNav extends HTMLElement {
      constructor() {
        super();

        const work = document.querySelector("#work")!;
        const buttons = this.querySelectorAll("button")!;

        // Scope setter function
        const setScope = (scope: WorkScope) => {
          // Set button and Pill style
          [...buttons].map((button) => {
            button.classList.remove("active");
            button.querySelector("div")?.classList.add("inactive");

            const buttonScope = button.getAttribute("data-scope");
            if (buttonScope == scope) {
              button.classList.add("active");
              button.querySelector("div")?.classList.remove("inactive");
            }
          });

          work.setAttribute("data-scope", scope);
        };

        const isWorkScope = (scope: string | null): boolean => {
          if (!scope) return false;
          if (!scopes.includes(scope)) return false;
          return true;
        };

        // Set the scope on button click
        [...buttons].map((button) => {
          button.addEventListener("click", () => {
            const buttonScope = button.getAttribute("data-scope");
            if (isWorkScope(buttonScope)) {
              setScope(buttonScope as WorkScope);
            }
          });
        });

        // Initialize scope state
        const existingScope = document
          .querySelector("#work")
          ?.getAttribute("data-scope");
        if (existingScope && isWorkScope(existingScope))
          setScope(existingScope as WorkScope);
        else setScope("design");
      }
    }
    if (customElements.get("work-nav") === undefined) {
      customElements.define("work-nav", WorkNav);
    }
  });
</script>

<style>
  .active {
    pointer-events: none;
    cursor: default;
    color: var(--gray-0);
  }
</style>
