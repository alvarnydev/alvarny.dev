---
import { ScopeIconMap, WorkScopes, type WorkScope } from "@/types";
import Icon from "./Icon.astro";
import Pill from "./Pill.astro";
---

<work-nav
  class="flex pt-4 md:pt-0 items-start justify-center sm:items-center md:justify-start gap-4 text-2xl"
>
  <p class="text-xl md:text-2xl">Filter by:</p>
  <div class="flex gap-2 flex-wrap">
    {
      WorkScopes.filter((filter) => filter !== "experience").map((scope) => (
        <button data-scope={scope}>
          <Pill>
            <Icon icon={ScopeIconMap[scope]} size="1.33em" />{" "}
            {scope.charAt(0).toUpperCase() + scope.slice(1)}
          </Pill>
        </button>
      ))
    }
  </div>
</work-nav>

<script>
  import { updateGridElements } from "@/helpers/update-grid-elements";
  import { isWorkScope, type WorkScope } from "@/types";

  document.addEventListener("astro:page-load", () => {
    // Initial offsets

    class WorkNav extends HTMLElement {
      constructor() {
        super();

        const work = document.querySelector("#work")!;
        const buttons = this.querySelectorAll("button")!;

        const setScope = (scope: WorkScope | null) => {
          // Set button and Pill style
          [...buttons].map((button) => {
            // Reset button and pill styles
            button.classList.remove("active");
            button.querySelector("div")?.classList.add("inactive");

            // Get current scope and button scope
            const buttonScope = button.getAttribute("data-scope");
            const currentWorkScope = work.getAttribute("data-scope");

            // If the button we clicked has the desired scope, set styles
            if (scope && buttonScope == scope) {
              // If already active, set to inactive
              if (currentWorkScope == scope) {
                button.classList.remove("active");
                button.querySelector("div")?.classList.add("inactive");
                work.setAttribute("data-scope", "");
              }
              // Else set to active
              else {
                button.classList.add("active");
                button.querySelector("div")?.classList.remove("inactive");
                work.setAttribute("data-scope", scope);
              }
              updateGridElements();
            }
          });
        };

        // Set the scope on button click
        [...buttons].map((button) => {
          button.addEventListener("click", () => {
            const buttonScope = button.getAttribute("data-scope");
            if (buttonScope && isWorkScope(buttonScope)) {
              setScope(buttonScope);
            }
          });
        });

        // Initialize scope state
        const existingScope = document
          .querySelector("#work")
          ?.getAttribute("data-scope");
        if (existingScope && isWorkScope(existingScope))
          setScope(existingScope);
        else setScope(null);
      }
    }
    if (customElements.get("work-nav") === undefined) {
      customElements.define("work-nav", WorkNav);
    }
  });
</script>

<style>
  .active {
    color: var(--gray-0);
  }
</style>
